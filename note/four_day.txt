一、函数
	将出现有规律的重复的代码，封装成函数，这样减少了工作量、减少了代码量、提高了代码的可维护性。
	Python不但能非常灵活地定义函数，而且本身内置了很多有用的函数，可以直接调用。
	抽象:借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。
	写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。
	（举例函数：area_of_circle  求圆的面积）
	1.调用函数 （只需要如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解）
		(1)要调用一个函数，需要知道函数的名称和参数。（举例函数abs（） 求绝对值）
			【1】可以用可以直接从Python的官方网站查看文档：http://docs.python.org/3/library/functions.html#abs
			【2】也可以在交互式命令行通过help(函数名字)查看函数的帮助信息。
	   （2）参数问题	（举例函数：max（）  可以接收任意多个参数，并返回最大的那个）
			【1】参数数量不对：调用函数的时候，如果传入的参数数量不对，会报TypeError的错误，并且Python会明确地告诉你：
abs()有且仅有1个参数，但给出了两个：TypeError: abs() takes exactly one argument (2 given)
			【2】参数类型不对：如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报TypeError的错误，并且给出错
误信息：str是错误的参数类型：TypeError: bad operand type for abs(): 'str'
		（3）函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：
		eg: >>>a = abs # 变量a指向abs函数
			>>> a(-1) # 所以也可以通过a调用abs函数
            1
		（4）数据类型转换：Python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数：
		 eg:    int()
			    float()
				str()
				bool()
				
	2.定义函数
		（1）在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号；，然后，在缩进块中编写函数体，
函数的返回值用return语句返回。
			【1】return ：函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件
判断和循环可以实现非常复杂的逻辑。
						如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。
						返回多值（可以返回多值）：比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的新的坐标：
						import math
						def move(x, y, step, angle=0):
							nx = x + step * math.cos(angle)
							ny = y - step * math.sin(angle)
							return nx, ny
						import math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数。然后，我们就可以同时获得返回值：
						>>> x, y = move(100, 100, 60, math.pi / 6)
						>>> print(x, y)
						151.96152422706632 70.0
						但其实这只是一种假象，Python函数返回的仍然是单一值：
						>>> r = move(100, 100, 60, math.pi / 6)
						>>> print(r)
						(151.96152422706632, 70.0)
						原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，
所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。
			【2】函数体(为空时为空函数)：如果想定义一个什么事也不做的空函数，可以用pass语句：
				eg:	def nop():
						pass
				pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一
个pass，让代码能运行起来。
				pass还可以用在其他语句里，比如：
					if age >= 18:
						pass
			总结：占位符
			【3】参数（参数检查）：调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError：
				但是如果参数类型不对，Python解释器就无法帮我们检查。试试my_abs和内置函数abs的差别：
					>>> my_abs('A')
					Traceback (most recent call last):
					  File "<stdin>", line 1, in <module>
					  File "<stdin>", line 2, in my_abs
					TypeError: unorderable types: str() >= int()
					>>> abs('A')
					Traceback (most recent call last):
					  File "<stdin>", line 1, in <module>
					TypeError: bad operand type for abs(): 'str'
				当传入了不恰当的参数时，内置函数abs会检查出参数错误，而我们定义的my_abs没有参数检查，会导致if语句出错，出错信息
和abs不一样。所以，这个函数定义不够完善。让我们修改一下my_abs的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检
查可以用内置函数isinstance()实现：
					def my_abs(x):
						if not isinstance(x, (int, float)):
							raise TypeError('bad operand type')
						if x >= 0:
							return x
						else:
							return -x
				添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：

				>>> my_abs('A')
				Traceback (most recent call last):
				  File "<stdin>", line 1, in <module>
				  File "<stdin>", line 3, in my_abs
				TypeError: bad operand type
			注：【1】在Python交互环境中定义函数时，注意Python会出现...的提示。函数定义结束后需要按两次回车重新回到>>>提示符下：
				【2】如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，
用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）
			小结
				定义函数时，需要确定函数名和参数个数；
				如果有必要，可以先对参数的数据类型做检查；
				函数体内部可以用return随时返回函数结果；
				函数执行完毕也没有return语句时，自动return None。
				函数可以同时返回多个值，但其实就是一个tuple。
	3.函数的参数：定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。对于函数的调用者来说，只需要知道如何传递
正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。
	Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出
来的接口，不但能处理复杂的参数，还可以简化调用者的代码。
		（1）位置参数；调用函数时，传入的两个值按照位置顺序依次赋给参数。
		（2）默认参数（默认的参数直接赋值）：默认参数可以简化函数的调用。设置默认参数时，有几点要注意：
			一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；
			二是如何设置默认参数。当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。	
			eg：我们可以把年龄和城市设为默认参数：
			def enroll(name, gender, age=6, city='Beijing'):
				print('name:', name)
				print('gender:', gender)
				print('age:', age)
				print('city:', city)
			【1】有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用enroll('Bob', 'M', 7)，意思是，除了name，gender这两
个参数外，最后1个参数应用在参数age上，city参数由于没有提供，仍然使用默认值。
			【2】也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')，
意思是，city参数用传进去的值，其他默认参数继续使用默认值。
			【3】定义默认参数要牢记一点：默认参数必须指向不变对象！
				为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。
此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。
		（3）可变参数：在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。
			我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。
			【1】将参数a，b，c……作为一个list或tuple传进来如下：
				def calc(numbers):
					sum = 0
					for n in numbers:
						sum = sum + n * n
					return sum
				但是调用的时候，需要先组装出一个list或tuple：
				>>> calc([1, 2, 3])
				14
				>>> calc((1, 3, 5, 7))
				84
				如果我们把函数的参数改为可变参数，则如下：
				def calc(*numbers):
					sum = 0
					for n in numbers:
						sum = sum + n * n
					return sum
				定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码
完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：
				>>> calc(1, 2)
				5
				>>> calc()
				0
			【2】Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：
				>>> nums = [1, 2, 3]
				>>> calc(*nums)
				14
				*nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。
		（4）关键字参数：可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，
这些关键字参数在函数内部自动组装为一个dict。请看示例：
			def person(name, age, **kw):
			print('name:', name, 'age:', age, 'other:', kw)
			【1】函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数：
				>>> person('Michael', 30)
				name: Michael age: 30 other: {}
			也可以传入任意个数的关键字参数：
				>>> person('Bob', 35, city='Beijing')
				name: Bob age: 35 other: {'city': 'Beijing'}
				>>> person('Adam', 45, gender='M', job='Engineer')
				name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}
			关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我
们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。
			【2】和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：
				>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
				>>> person('Jack', 24, city=extra['city'], job=extra['job'])
				name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
				当然，上面复杂的调用可以用简化的写法：
				>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
				>>> person('Jack', 24, **extra)
				name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
				**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的
改动不会影响到函数外的extra。
		（5）命名关键字参数：关键字参数对输入的关键字参数没有限制，如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。
这种方式定义的函数如下：
			def person(name, age, *, city, job):
				print(name, age, city, job)
			（1）如何对命名关键字参数进行定义：
				【1】和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。如上述例子
				【2】如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：
					def person(name, age, *args, city, job):
						print(name, age, args, city, job)
				【3】命名关键字参数可以有缺省值，从而简化调用：
					def person(name, age, *, city='Beijing', job):
						print(name, age, city, job)
			（2）调用：命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：
					>>> person('Jack', 24, 'Beijing', 'Engineer')
					Traceback (most recent call last):
					  File "<stdin>", line 1, in <module>
					TypeError: person() takes 2 positional arguments but 4 were given
				由于调用时缺少参数名city和job，Python解释器把这4个参数均视为位置参数，但person()函数仅接受2个位置参数。
		（6）参数组合：在Python中定义函数时，可以选用必选参数、默认参数、可变参数、关键字参数、命名关键字参数，这五种参数都可以进行组合使用。
			【1】五种参数组合使用的规则顺序必须是：必选参数、默认参数、可变参数（*args：以tuple接收）、命名关键字参数（（，*，）or（，*args，））、关键字
参数（**kw：以dict接收）。
		小结
		Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
		默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！
		要注意定义可变参数和关键字参数的语法：
		*args是可变参数，args接收的是一个tuple；
		**kw是关键字参数，kw接收的是一个dict。
		以及调用函数时如何传入可变参数和关键字参数的语法：
		可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；
		关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。
		使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。
		命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。
		定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。
	4.递归函数
		在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。
		(1)使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。
		(2)针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。
		(3)Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。