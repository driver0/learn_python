1.	在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。
源码保存：由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。
源码读取：当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
#!/usr/bin/env python3
#-*- coding:utf-8 -*-
第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：
2.	格式化
 如何输出格式化的字符串？在Python中，采用的格式化方式和C语言是一致的，用%实现：
占位符	替换内容
%d	整数
%f	浮点数
%s	字符串
%x	十六进制整数
3.	数据类型：list和tuple
（1）list：Python内置的一种数据类型是列表,其是一种有序的集合，可以随时添加和删除其中的元素。以“[a,b,....]”表示
【1】增：变量名.append(要追加的字符串)
变量名.insert（位置，要插入的字符串）
【2】删：变量名.pop()     删除list末尾的元素
变量名.pop(位置)	删除指定位置的元素
【3】改：变量名[位置] = 要改的字符串 
【4】查：通过索引来查
变量名[0到len(变量名)-1]进行正索引
变量名.[-1到len（变量名）]进行倒索引
（2）tuple：另一种有序列表叫元组。其与list非常类似，但是tuple一旦初始化就不能修改了。也就是说其没有“增删改”，只有“查”了，“查”和list的“查”一样。
4.	if语句
if <条件判断1>:
<执行1>
elif	<条件判断2>:
<执行2>
elif	<条件判断3>
<执行3>
else
<执行4>
(1)	if语句有个特点，它是从上往下判断，如果在某个判断为ture时，把该判断对应的语句执行后，就忽略掉剩下的elif和else
(2)	If判断可以简写为：
if x:
print(‘true’)
只要X是非零数值、非空字符串、非空list等 ，就判断为True，否则为False。
5.	Input
Input的返回值是字符串，要想变为整数要用int（str）函数进行转换。
6.	int int(str):将字符串变为整数类型。但str必须是数字字符串，否则会报错。
7.	for 变量 in list/tuple/range(数字) ：一次把list或tuple中的每个元素迭代出来。
（1）range()函数：可以生成一个整数序列。
（2）List（）行数：可以将range()函数生成的整数序列转换成list。
8.	while :只要条件满足，就不断循环下去，条件不满足时推出循环。
9.	Break：在循环中，break可以提前退出循环 。
10.continue：在循环过程中，可以通过continue跳过当前的这次循环，直接开始下一次循环。
