一、高级特性
    1.切片：这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。
	（1）取法：
	    【1】正取：eg1：>>> L[:3]   eg2：>>> L[1:3]

	    【2】倒取：eg1：>>> L[-2:]  eg3：>>> L[-2:-1]
	    【3】前10个数，每两个取一个：>>> L[:10:2]
	    【4】所有数，每5个取一个：>>> L[::5]
	    【5】什么都不写，只写[:]就可以原样复制一个list：>>> L[:]
							   [0, 1, 2, 3, ..., 99]
	    【6】tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：
		>>> (0, 1, 2, 3, 4, 5)[:3]
		(0, 1, 2)
	    【7】字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结
果仍是字符串：
		>>> 'ABCDEFG'[:3]
		'ABC'
		>>> 'ABCDEFG'[::2]
		'ACEG'
	    【8】在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。
Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。
    2.迭代：如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。
	（1）在Python中，迭代是通过for ... in来完成的。只要是可迭代对象，无论有无下标，其都可以迭代，比如dict就可以迭代：
	（2）默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，如果要同时迭代key和value，
可以用for k, v in d.items()。
	（3）那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：
		>>> from collections import Iterable
		>>> isinstance('abc', Iterable) # str是否可迭代
		True
		>>> isinstance([1,2,3], Iterable) # list是否可迭代
		True
		>>> isinstance(123, Iterable) # 整数是否可迭代
		False

	函数总结：for .. in ..
		  collections.Iterable  isinstance()方法
		  from ... import ...
		  list
		  tuple
		  dict
    3.列表生成式
	（1）写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。

for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：
		>>> [x * x for x in range(1, 11) if x % 2 == 0]
		[4, 16, 36, 64, 100]
	4.生成器：要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
	    (1)创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。
	    (2)我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？
			[1]如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值：	
			我们讲过，generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。
			[2]当然，上面这种不断调用next(g)实在是太变态了，正确的方法是使用for循环，因为generator也是可迭代对象：
			>>> g = (x * x for x in range(10))
			>>> for n in g:
			...     print(n)
			>>> f = fib(6)
		(3)定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
		这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时
候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。
		函数总结：generator生成器
				  next()方法获得generator的下一个返回值
				  for ... in ... 迭代generator
				  Fibonacci 斐波拉契数列
				  yield  函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
				  try: ...
				  except ...
		小结：generator是非常强大的工具，在Python中，可以简单地把列表生成式改成generator，也可以通过函数实现复杂逻辑的generator。
要理解generator的工作原理，它是在for循环的过程中不断计算出下一个元素，并在适当的条件结束for循环。对于函数改成的generator来说，遇到return语句或者执行到函数体
最后一行语句，就是结束generator的指令，for循环随之结束。
	4.迭代器：
		(1)我们已经知道，可以直接作用于for循环的数据类型有以下几种：
			一类是集合数据类型，如list、tuple、dict、set、str等；
			一类是generator，包括生成器和带yield的generator function。
			这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。
		(2)可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。(迭代器是一个对象，生成器都是迭代器对象)
		    【1】可以使用isinstance()判断一个对象是否是Iterator对象：
				>>> from collections import Iterator
				>>> isinstance((x for x in range(10)), Iterator)
				True
				>>> isinstance([], Iterator)
				False
				>>> isinstance({}, Iterator)
				False
				>>> isinstance('abc', Iterator)
				False
		（3）生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。把list、dict、str等Iterable变成Iterator可以使用iter()函数：
			>>> isinstance(iter([]), Iterator)
			True
			>>> isinstance(iter('abc'), Iterator)
			True
		（4）为什么list、dict、str等数据类型不是Iterator？
			这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。
可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需
要返回下一个数据时它才会计算。
			terator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。
		函数总结：list tuple dict set str
				  generator 带yield的generator function
				  Iterable Iterator	
				  from import
				  collections Iterable isinstance
				  StopIteration
				  next()